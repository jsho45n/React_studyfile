{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\user\\\\Desktop\\\\git\\\\\\uB9AC\\uC561\\uD2B8\\uB97C \\uB2E4\\uB8E8\\uB294 \\uAE30\\uC220\\\\hooks-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\git\\\\\\uB9AC\\uC561\\uD2B8\\uB97C \\uB2E4\\uB8E8\\uB294 \\uAE30\\uC220\\\\hooks-tutorial\\\\src\\\\Average.js\";\nimport React, { useState, useMemo, useCallback, useRef } from 'react';\n\nconst getAverage = numbers => {\n  console.log('평균값 계산중...');\n  if (numbers.length === 0) return 0;\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum / numbers.length;\n};\n\nconst Average = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        list = _useState2[0],\n        setList = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        number = _useState4[0],\n        setNumber = _useState4[1];\n\n  const inputEl = useRef(null);\n  const onChange = useCallback(e => {\n    setNumber(e.target.value);\n  }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성\n\n  const onInsert = useCallback(() => {\n    const nextList = list.concat(parseInt(number));\n    setList(nextList);\n    setNumber('');\n    inputEl.current.focus();\n  }, [name, list]); // name 혹은 list가 바뀌었을 때만 함수 생성\n\n  const avg = useMemo(() => getAverage(list), [list]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: number,\n    onChange: onChange,\n    ref: inputEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: onInsert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"\\uB4F1\\uB85D\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, list.map((value, index) => React.createElement(\"li\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, value))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"\\uD3C9\\uADE0\\uAC12 : \"), \" \", avg));\n};\n\nexport default Average;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\git\\리액트를 다루는 기술\\hooks-tutorial\\src\\Average.js"],"names":["React","useState","useMemo","useCallback","useRef","getAverage","numbers","console","log","length","sum","reduce","a","b","Average","list","setList","number","setNumber","inputEl","onChange","e","target","value","onInsert","nextList","concat","parseInt","current","focus","name","avg","map","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,EAAgDC,MAAhD,QAA8D,OAA9D;;AAEA,MAAMC,UAAU,GAAGC,OAAO,IAAI;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,MAAIF,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B,OAAO,CAAP;AAC1B,QAAMC,GAAG,GAAGJ,OAAO,CAACK,MAAR,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA7B,CAAZ;AACA,SAAOH,GAAG,GAAGJ,OAAO,CAACG,MAArB;AACH,CALD;;AAOA,MAAMK,OAAO,GAAG,MAAM;AAAA,oBACMb,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,QACXc,IADW;AAAA,QACLC,OADK;;AAAA,qBAEUf,QAAQ,CAAC,EAAD,CAFlB;AAAA;AAAA,QAEXgB,MAFW;AAAA,QAEHC,SAFG;;AAGlB,QAAMC,OAAO,GAAGf,MAAM,CAAC,IAAD,CAAtB;AAEA,QAAMgB,QAAQ,GAAGjB,WAAW,CAACkB,CAAC,IAAI;AAC9BH,IAAAA,SAAS,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACH,GAF2B,EAEzB,EAFyB,CAA5B,CALkB,CAOV;;AAER,QAAMC,QAAQ,GAAGrB,WAAW,CAAC,MAAM;AAC/B,UAAMsB,QAAQ,GAAGV,IAAI,CAACW,MAAL,CAAYC,QAAQ,CAACV,MAAD,CAApB,CAAjB;AACAD,IAAAA,OAAO,CAACS,QAAD,CAAP;AACAP,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAC,IAAAA,OAAO,CAACS,OAAR,CAAgBC,KAAhB;AACH,GAL2B,EAKzB,CAACC,IAAD,EAAOf,IAAP,CALyB,CAA5B,CATkB,CAcE;;AAEpB,QAAMgB,GAAG,GAAG7B,OAAO,CAAC,MAAMG,UAAU,CAACU,IAAD,CAAjB,EAAyB,CAACA,IAAD,CAAzB,CAAnB;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,KAAK,EAAEE,MAAd;AAAsB,IAAA,QAAQ,EAAEG,QAAhC;AAA0C,IAAA,GAAG,EAAED,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEK,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,IAAI,CAACiB,GAAL,CAAS,CAACT,KAAD,EAAQU,KAAR,KACN;AAAI,IAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBV,KAAjB,CADH,CADL,CAHJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,OACmBQ,GADnB,CARJ,CADJ;AAcH,CAhCD;;AAkCA,eAAejB,OAAf","sourcesContent":["import React, { useState, useMemo, useCallback, useRef } from 'react';\r\n\r\nconst getAverage = numbers => {\r\n    console.log('평균값 계산중...');\r\n    if (numbers.length === 0) return 0;\r\n    const sum = numbers.reduce((a, b) => a + b);\r\n    return sum / numbers.length;\r\n};\r\n\r\nconst Average = () => {\r\n    const [list, setList] = useState([]);\r\n    const [number, setNumber] = useState('');\r\n    const inputEl = useRef(null);\r\n\r\n    const onChange = useCallback(e => {\r\n        setNumber(e.target.value);\r\n    }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성\r\n\r\n    const onInsert = useCallback(() => {\r\n        const nextList = list.concat(parseInt(number));\r\n        setList(nextList);\r\n        setNumber('');\r\n        inputEl.current.focus();\r\n    }, [name, list]);   // name 혹은 list가 바뀌었을 때만 함수 생성\r\n\r\n    const avg = useMemo(() => getAverage(list), [list]);\r\n\r\n    return (\r\n        <div>\r\n            <input value={number} onChange={onChange} ref={inputEl} />\r\n            <button onClick={onInsert}>등록</button>\r\n            <ul>\r\n                {list.map((value, index) => (\r\n                    <li key={index}>{value}</li>\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                <b>평균값 : </b> {avg}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Average;\r\n\r\n"]},"metadata":{},"sourceType":"module"}