{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\Desktop\\\\git\\\\\\uB9AC\\uC561\\uD2B8\\uB97C \\uB2E4\\uB8E8\\uB294 \\uAE30\\uC220\\\\hello-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\user\\\\Desktop\\\\git\\\\\\uB9AC\\uC561\\uD2B8\\uB97C \\uB2E4\\uB8E8\\uB294 \\uAE30\\uC220\\\\hello-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\git\\\\\\uB9AC\\uC561\\uD2B8\\uB97C \\uB2E4\\uB8E8\\uB294 \\uAE30\\uC220\\\\hello-react\\\\src\\\\EventPractice.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\n\nconst EventPractice = () => {\n  const _useState = useState({\n    username: '',\n    message: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        form = _useState2[0],\n        setForm = _useState2[1];\n\n  const username = form.username,\n        message = form.message;\n\n  const onChange = e => {\n    const nextForm = _objectSpread({}, form, {\n      // 기존의 form 내용을 이 자리에 복사한 뒤\n      [e.target.name]: e.target.value // 원하는 값을 덮어 씌우기\n\n    });\n\n    setForm(nextForm);\n  };\n\n  const onClick = () => {\n    alert(username + ': ' + message);\n    setUsername('');\n    setMessage('');\n  };\n\n  const onKeyPress = e => {\n    if (e.key === 'Enter') {\n      onClick();\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"\\uC774\\uBCA4\\uD2B8 \\uC5F0\\uC2B5\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"\\uC0AC\\uC6A9\\uC790\\uBA85\",\n    value: username,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"message\",\n    placeholder: \"\\uC544\\uBB34\\uAC70\\uB098 \\uC785\\uB825\\uD574 \\uBCF4\\uC138\\uC694\",\n    value: message,\n    onChange: onChange,\n    onKeyPress: onKeyPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"\\uD655\\uC778\"));\n};\n\nexport default EventPractice;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\git\\리액트를 다루는 기술\\hello-react\\src\\EventPractice.js"],"names":["React","useState","EventPractice","username","message","form","setForm","onChange","e","nextForm","target","name","value","onClick","alert","setUsername","setMessage","onKeyPress","key"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA,oBACAD,QAAQ,CAAC;AAC7BE,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,OAAO,EAAE;AAFoB,GAAD,CADR;AAAA;AAAA,QACjBC,IADiB;AAAA,QACXC,OADW;;AAAA,QAKhBH,QALgB,GAKME,IALN,CAKhBF,QALgB;AAAA,QAKNC,OALM,GAKMC,IALN,CAKND,OALM;;AAMxB,QAAMG,QAAQ,GAAGC,CAAC,IAAI;AAClB,UAAMC,QAAQ,qBACPJ,IADO;AACD;AACT,OAACG,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE,KAFhB,CAEsB;;AAFtB,MAAd;;AAIAN,IAAAA,OAAO,CAACG,QAAD,CAAP;AACH,GAND;;AAOA,QAAMI,OAAO,GAAG,MAAM;AAClBC,IAAAA,KAAK,CAACX,QAAQ,GAAG,IAAX,GAAkBC,OAAnB,CAAL;AACAW,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAJD;;AAKA,QAAMC,UAAU,GAAGT,CAAC,IAAI;AACpB,QAAIA,CAAC,CAACU,GAAF,KAAU,OAAd,EAAuB;AACnBL,MAAAA,OAAO;AACV;AACJ,GAJD;;AAKA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,UAAxB;AAAmC,IAAA,WAAW,EAAC,0BAA/C;AAAsD,IAAA,KAAK,EAAEV,QAA7D;AAAuE,IAAA,QAAQ,EAAEI,QAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,WAAW,EAAC,gEAA9C;AAA6D,IAAA,KAAK,EAAEH,OAApE;AAA6E,IAAA,QAAQ,EAAEG,QAAvF;AAAiG,IAAA,UAAU,EAAEU,UAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI;AAAQ,IAAA,OAAO,EAAEJ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,CADJ;AASH,CAhCD;;AAkCA,eAAeX,aAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst EventPractice = () => {\r\n    const [form, setForm] = useState({\r\n        username: '',\r\n        message: ''\r\n    });\r\n    const { username, message } = form;\r\n    const onChange = e => {\r\n        const nextForm = {\r\n            ...form, // 기존의 form 내용을 이 자리에 복사한 뒤\r\n            [e.target.name]: e.target.value // 원하는 값을 덮어 씌우기\r\n        };\r\n        setForm(nextForm);\r\n    }\r\n    const onClick = () => {\r\n        alert(username + ': ' + message);\r\n        setUsername('');\r\n        setMessage('');\r\n    };\r\n    const onKeyPress = e => {\r\n        if (e.key === 'Enter') {\r\n            onClick();\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>이벤트 연습</h1>\r\n            <hr />\r\n            <input type=\"text\" name=\"username\" placeholder=\"사용자명\" value={username} onChange={onChange} />\r\n            <input type=\"text\" name=\"message\" placeholder=\"아무거나 입력해 보세요\" value={message} onChange={onChange} onKeyPress={onKeyPress} />\r\n            <button onClick={onClick}>확인</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventPractice;"]},"metadata":{},"sourceType":"module"}